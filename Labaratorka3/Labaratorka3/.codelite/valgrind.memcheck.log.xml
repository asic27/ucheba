<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./Tcezar</line>
</preamble>

<pid>1426</pid>
<ppid>1422</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--tool=memcheck</arg>
    <arg>--xml=yes</arg>
    <arg>--fullpath-after=</arg>
    <arg>--gen-suppressions=all</arg>
    <arg>--xml-file=/home/asic27/Labaratorka3/Labaratorka3/.codelite/valgrind.memcheck.log.xml</arg>
    <arg>--suppressions=/home/asic27/Labaratorka3/Labaratorka3/.codelite/valgrind.memcheck.supp</arg>
    <arg>--leak-check=yes</arg>
    <arg>--track-origins=yes</arg>
  </vargv>
  <argv>
    <exe>./Tcezar</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:01.062 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x4F72F6A</ip>
      <obj>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25</obj>
      <fn>std::__cxx11::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt;::~basic_string()</fn>
    </frame>
    <frame>
      <ip>0x40169F</ip>
      <obj>/home/asic27/Labaratorka3/Labaratorka3/Tcezar/Debug/Tcezar</obj>
      <fn>main</fn>
      <dir>/home/asic27/Labaratorka3/Labaratorka3/Tcezar</dir>
      <file>main.cpp</file>
      <line>23</line>
    </frame>
  </stack>
  <auxwhat>Uninitialised value was created by a stack allocation</auxwhat>
  <stack>
    <frame>
      <ip>0x401573</ip>
      <obj>/home/asic27/Labaratorka3/Labaratorka3/Tcezar/Debug/Tcezar</obj>
      <fn>main</fn>
      <dir>/home/asic27/Labaratorka3/Labaratorka3/Tcezar</dir>
      <file>main.cpp</file>
      <line>14</line>
    </frame>
  </stack>
  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Cond</skind>
    <sframe> <fun>_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED1Ev</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Cond
   fun:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED1Ev
   fun:main
}
]]>
    </rawtext>
  </suppression>
</error>

  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Cond</skind>
    <sframe> <fun>_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED1Ev</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Cond
   fun:_ZNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEED1Ev
   fun:main
}
]]>
    </rawtext>
  </suppression>
<error>
  <unique>0x1</unique>
  <tid>1</tid>
  <kind>UninitCondition</kind>
  <what>Conditional jump or move depends on uninitialised value(s)</what>
  <stack>
    <frame>
      <ip>0x4C2F201</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator delete(void*)</fn>
    </frame>
    <frame>
      <ip>0x40169F</ip>
      <obj>/home/asic27/Labaratorka3/Labaratorka3/Tcezar/Debug/Tcezar</obj>
      <fn>main</fn>
      <dir>/home/asic27/Labaratorka3/Labaratorka3/Tcezar</dir>
      <file>main.cpp</file>
      <line>23</line>
    </frame>
  </stack>
  <auxwhat>Uninitialised value was created by a stack allocation</auxwhat>
  <stack>
    <frame>
      <ip>0x401573</ip>
      <obj>/home/asic27/Labaratorka3/Labaratorka3/Tcezar/Debug/Tcezar</obj>
      <fn>main</fn>
      <dir>/home/asic27/Labaratorka3/Labaratorka3/Tcezar</dir>
      <file>main.cpp</file>
      <line>14</line>
    </frame>
  </stack>
  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Cond</skind>
    <sframe> <fun>_ZdlPv</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Cond
   fun:_ZdlPv
   fun:main
}
]]>
    </rawtext>
  </suppression>
</error>

  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Cond</skind>
    <sframe> <fun>_ZdlPv</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Cond
   fun:_ZdlPv
   fun:main
}
]]>
    </rawtext>
  </suppression>
<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>InvalidFree</kind>
  <what>Invalid free() / delete / delete[] / realloc()</what>
  <stack>
    <frame>
      <ip>0x4C2F24B</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so</obj>
      <fn>operator delete(void*)</fn>
    </frame>
    <frame>
      <ip>0x40169F</ip>
      <obj>/home/asic27/Labaratorka3/Labaratorka3/Tcezar/Debug/Tcezar</obj>
      <fn>main</fn>
      <dir>/home/asic27/Labaratorka3/Labaratorka3/Tcezar</dir>
      <file>main.cpp</file>
      <line>23</line>
    </frame>
  </stack>
  <auxwhat>Address 0x6 is not stack'd, malloc'd or (recently) free'd</auxwhat>
  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Free</skind>
    <sframe> <fun>_ZdlPv</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Free
   fun:_ZdlPv
   fun:main
}
]]>
    </rawtext>
  </suppression>
</error>

  <suppression>
    <sname>insert_a_suppression_name_here</sname>
    <skind>Memcheck:Free</skind>
    <sframe> <fun>_ZdlPv</fun> </sframe>
    <sframe> <fun>main</fun> </sframe>
    <rawtext>
<![CDATA[
{
   <insert_a_suppression_name_here>
   Memcheck:Free
   fun:_ZdlPv
   fun:main
}
]]>
    </rawtext>
  </suppression>

<status>
  <state>FINISHED</state>
  <time>00:00:00:04.646 </time>
</status>

<errorcounts>
  <pair>
    <count>1</count>
    <unique>0x2</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x1</unique>
  </pair>
  <pair>
    <count>1</count>
    <unique>0x0</unique>
  </pair>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

